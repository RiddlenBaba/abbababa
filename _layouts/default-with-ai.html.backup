<!DOCTYPE html>
<html lang="en">
<head>
    <!-- Google Tag Manager -->
    {% if site.google_tag_manager %}
    <script>(function(w,d,s,l,i){w[l]=w[l]||[];w[l].push({'gtm.start':
    new Date().getTime(),event:'gtm.js'});var f=d.getElementsByTagName(s)[0],
    j=d.createElement(s),dl=l!='dataLayer'?'&l='+l:'';j.async=true;j.src=
    'https://www.googletagmanager.com/gtm.js?id='+i+dl;f.parentNode.insertBefore(j,f);
    })(window,document,'script','dataLayer','{{ site.google_tag_manager }}');</script>
    {% endif %}
    <!-- End Google Tag Manager -->

    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{% if page.title %}{{ page.title }} | {% endif %}{{ site.title }}</title>
    <meta name="description" content="{% if page.description %}{{ page.description }}{% else %}{{ site.description }}{% endif %}">

    <link rel="stylesheet" href="{{ '/assets/css/main.css' | relative_url }}">
    <link rel="canonical" href="{{ page.url | replace:'index.html','' | absolute_url }}">

    {% seo %}
    {% feed_meta %}
    {% include structured-data.html %}

    <!-- Google Analytics -->
    {% if site.google_analytics %}
    <script async src="https://www.googletagmanager.com/gtag/js?id={{ site.google_analytics }}"></script>
    <script>
      window.dataLayer = window.dataLayer || [];
      function gtag(){dataLayer.push(arguments);}
      gtag('js', new Date());
      gtag('config', '{{ site.google_analytics }}');
    </script>
    {% endif %}
    <!-- End Google Analytics -->
</head>
<body>
    <!-- Google Tag Manager (noscript) -->
    {% if site.google_tag_manager %}
    <noscript><iframe src="https://www.googletagmanager.com/ns.html?id={{ site.google_tag_manager }}"
    height="0" width="0" style="display:none;visibility:hidden"></iframe></noscript>
    {% endif %}
    <!-- End Google Tag Manager (noscript) -->
    {% include header.html %}

    <main>
        {{ content }}
    </main>

    {% include footer.html %}

    <!-- Custom Abba AI Chat Widget -->
    <div id="abba-chat-widget" class="chat-widget">
        <button id="chat-toggle" class="chat-toggle" aria-label="Open Abba AI Chat">
            <svg class="chat-icon" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <path d="M21 15a2 2 0 0 1-2 2H7l-4 4V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2z"></path>
            </svg>
            <svg class="close-icon" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" style="display: none;">
                <line x1="18" y1="6" x2="6" y2="18"></line>
                <line x1="6" y1="6" x2="18" y2="18"></line>
            </svg>
        </button>

        <div id="chat-window" class="chat-window" style="display: none;">
            <div class="chat-header">
                <div class="chat-avatar">
                    <div class="avatar-circle">
                        <span class="avatar-text">AI</span>
                    </div>
                </div>
                <div class="chat-title">
                    <h3>Abba AI ‚ú®</h3>
                    <p>Ready to unlock potential?</p>
                </div>
                <button type="button" class="chat-close" onclick="AbbaChat.toggleChat()" aria-label="Close chat">√ó</button>
            </div>

            <div id="chat-messages" class="chat-messages">
                <div class="message bot-message">
                    <div class="message-content">
                        <p>Hey there! üëã I'm Abba AI, and I'm genuinely excited you're here! I love helping businesses discover how AI can give them their time back and unlock amazing possibilities.</p>
                        <p>What sounds most interesting to you right now?</p>
                        <div class="quick-questions">
                            <button class="quick-question" data-question="How does AI-human collaboration actually work?">ü§ù AI + Human magic</button>
                            <button class="quick-question" data-question="What could you help my business with?">üöÄ Transform my business</button>
                            <button class="quick-question" data-question="Tell me about this Mycelium thing">üçÑ The Mycelium network</button>
                            <button class="quick-question" data-question="What's Riddlen about?">üéÆ Riddlen platform</button>
                            <button class="quick-question" data-question="Show me some automation wins">‚ö° Automation success stories</button>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Contact info collection form (initially hidden) -->
            <div id="contact-form" class="contact-collection" style="display: none;">
                <div class="contact-header">
                    <button type="button" class="contact-close" onclick="AbbaChat.skipContactForm()" aria-label="Close contact form">√ó</button>
                    <div class="emoji-wave">üëã</div>
                    <h4>I'd love to introduce you to our team!</h4>
                    <p>Share a few quick details and we'll send you personalized AI automation ideas for your business. No spam, just valuable insights! ‚ú®</p>
                </div>
                <form id="contact-details-form" class="contact-details-form">
                    <div class="form-group">
                        <label class="form-label">üëã What should we call you?</label>
                        <input type="text" id="user-name" placeholder="Your first name" required>
                    </div>
                    <div class="form-group">
                        <label class="form-label">üìß Where can we reach you?</label>
                        <input type="email" id="user-email" placeholder="your@email.com" required>
                    </div>
                    <div class="form-group">
                        <label class="form-label">üè¢ What company are you with?</label>
                        <input type="text" id="user-company" placeholder="Your awesome company (optional)">
                    </div>
                    <div class="form-actions">
                        <button type="submit" class="btn-primary">
                            <span class="btn-icon">üöÄ</span>
                            Get my personalized recommendations
                        </button>
                        <button type="button" class="btn-secondary" onclick="AbbaChat.skipContactForm()">
                            Maybe later, let's keep chatting
                        </button>
                    </div>
                </form>
                <div class="trust-indicators">
                    <div class="trust-item">
                        <span class="trust-icon">üîí</span>
                        <span class="trust-text">Your info is safe with us</span>
                    </div>
                    <div class="trust-item">
                        <span class="trust-icon">‚ö°</span>
                        <span class="trust-text">Quick 5-minute response</span>
                    </div>
                    <div class="trust-item">
                        <span class="trust-icon">üí°</span>
                        <span class="trust-text">Custom automation ideas</span>
                    </div>
                </div>
            </div>

            <form id="chat-form" class="chat-input-form">
                <div class="chat-input-container">
                    <input
                        type="text"
                        id="chat-input"
                        class="chat-input"
                        placeholder="Ask about AI automation, services, or Riddlen..."
                        autocomplete="off"
                    >
                    <button type="submit" class="chat-send" aria-label="Send message">
                        <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                            <line x1="22" y1="2" x2="11" y2="13"></line>
                            <polygon points="22,2 15,22 11,13 2,9"></polygon>
                        </svg>
                    </button>
                </div>
            </form>
        </div>
    </div>

    <script>
        // Custom Abba AI Chat Widget
        class AbbaAIChat {
            constructor() {
                this.chatToggle = document.getElementById('chat-toggle');
                this.chatWindow = document.getElementById('chat-window');
                this.chatMessages = document.getElementById('chat-messages');
                this.chatForm = document.getElementById('chat-form');
                this.chatInput = document.getElementById('chat-input');
                this.contactForm = document.getElementById('contact-form');
                this.contactDetailsForm = document.getElementById('contact-details-form');
                this.chatIcon = document.querySelector('.chat-icon');
                this.closeIcon = document.querySelector('.close-icon');
                this.isOpen = false;
                this.userInfo = {
                    name: '',
                    email: '',
                    company: '',
                    hasProvidedInfo: false
                };
                this.messageCount = 0;
                this.shouldPromptForInfo = true;
                this.contactCollection = {
                    active: false,
                    step: 'none', // 'name', 'email', 'done'
                    name: '',
                    email: ''
                };
                // WARNING: API keys in client-side code are visible to users
                // For production, use server-side proxy or serverless functions
                this.apiKey = '{{ site.openai_api_key }}' || '{{ site.claude_api_key }}';
                this.apiProvider = '{{ site.ai_provider | default: "openai" }}';

                this.init();
            }

            init() {
                this.chatToggle.addEventListener('click', () => this.toggleChat());
                this.chatForm.addEventListener('submit', (e) => this.handleSubmit(e));
                this.contactDetailsForm.addEventListener('submit', (e) => this.handleContactSubmit(e));

                // Quick question buttons
                document.addEventListener('click', (e) => {
                    if (e.target.classList.contains('quick-question')) {
                        const question = e.target.dataset.question;
                        this.sendMessage(question);
                    }
                });

                // ESC key to close
                document.addEventListener('keydown', (e) => {
                    if (e.key === 'Escape' && this.isOpen) {
                        this.toggleChat();
                    }
                });
            }

            async handleContactSubmit(e) {
                e.preventDefault();

                const name = document.getElementById('user-name').value.trim();
                const email = document.getElementById('user-email').value.trim();
                const company = document.getElementById('user-company').value.trim();

                if (!name || !email) {
                    this.addMessage("Please provide both your name and email to continue.", 'bot');
                    return;
                }

                // Store user info
                this.userInfo = {
                    name: name,
                    email: email,
                    company: company,
                    hasProvidedInfo: true
                };

                // Submit to your contact form system
                await this.submitToContactForm(name, email, company);

                // Hide contact form and show success message
                this.contactForm.style.display = 'none';
                this.chatForm.style.display = 'block';

                this.addMessage(`Thanks ${name}! I've connected you with our team. They'll follow up with personalized automation recommendations for ${company || 'your business'}. In the meantime, feel free to ask me anything else!`, 'bot');

                this.shouldPromptForInfo = false;
            }

            async submitToContactForm(name, email, company) {
                try {
                    // Submit to Formspree (your existing contact form endpoint)
                    const formData = new FormData();
                    formData.append('name', name);
                    formData.append('email', email);
                    formData.append('company', company || '');
                    formData.append('interest', 'ai-integration'); // Default service
                    formData.append('message', `Chat widget lead: ${name} from ${company || 'their company'} is interested in AI automation. Email: ${email}`);
                    formData.append('_subject', 'New Chat Widget Lead - Abba Baba');

                    await fetch('https://formspree.io/f/xblzywnn', {
                        method: 'POST',
                        body: formData,
                        headers: {
                            'Accept': 'application/json'
                        }
                    });
                } catch (error) {
                    console.error('Failed to submit contact form:', error);
                    // Continue anyway - we still have their info in the chat
                }
            }

            skipContactForm() {
                this.contactForm.style.display = 'none';
                this.chatForm.style.display = 'block';
                this.shouldPromptForInfo = false;
                this.addMessage("No problem! Feel free to continue our conversation. If you'd like personalized recommendations later, just let me know!", 'bot');
            }

            showContactForm() {
                // Only show contact form if chat form is currently visible
                if (this.chatForm.style.display !== 'none') {
                    this.contactForm.style.display = 'block';
                    this.chatForm.style.display = 'none';
                }
            }

            ensureChatFormVisible() {
                // Safety method to ensure chat form is always visible
                if (this.chatForm.style.display === 'none' && this.contactForm.style.display === 'none') {
                    this.chatForm.style.display = 'block';
                }
            }

            startSimpleContactCollection() {
                if (!this.contactCollection.active && !this.userInfo.hasProvidedInfo) {
                    this.contactCollection.active = true;
                    this.contactCollection.step = 'name';
                    this.shouldPromptForInfo = false;

                    this.addMessage("I'd love to send you some personalized recommendations! üòä What's your first name?", 'bot');
                }
            }

            handleContactCollection(message) {
                if (!this.contactCollection.active) return false;

                const trimmedMessage = message.trim();

                if (this.contactCollection.step === 'name') {
                    this.contactCollection.name = trimmedMessage;
                    this.contactCollection.step = 'email';
                    this.addMessage(`Nice to meet you, ${trimmedMessage}! üëã What's your email address so I can send you those recommendations?`, 'bot');
                    return true;
                } else if (this.contactCollection.step === 'email') {
                    // Simple email validation
                    if (trimmedMessage.includes('@') && trimmedMessage.includes('.')) {
                        this.contactCollection.email = trimmedMessage;
                        this.contactCollection.step = 'done';
                        this.contactCollection.active = false;

                        // Submit to contact form
                        this.submitSimpleContact(this.contactCollection.name, this.contactCollection.email);

                        this.addMessage(`Perfect! Thanks ${this.contactCollection.name}! üöÄ I'll send personalized automation recommendations to ${trimmedMessage}. Our team will follow up with you soon!\n\nIn the meantime, feel free to ask me anything else!`, 'bot');

                        this.userInfo.hasProvidedInfo = true;
                        return true;
                    } else {
                        this.addMessage("That doesn't look like a valid email address. Could you please share your email? (example: you@company.com)", 'bot');
                        return true;
                    }
                }

                return false;
            }

            async submitSimpleContact(name, email) {
                try {
                    const formData = new FormData();
                    formData.append('name', name);
                    formData.append('email', email);
                    formData.append('interest', 'Simple Chat Collection');
                    formData.append('_subject', 'Simple Chat Contact Collection - Abba Baba');

                    await fetch('https://formspree.io/f/xblzywnn', {
                        method: 'POST',
                        body: formData
                    });
                } catch (error) {
                    console.error('Failed to submit simple contact:', error);
                }
            }

            toggleChat() {
                this.isOpen = !this.isOpen;

                if (this.isOpen) {
                    this.chatWindow.style.display = 'flex';
                    this.chatIcon.style.display = 'none';
                    this.closeIcon.style.display = 'block';
                    this.chatInput.focus();
                } else {
                    this.chatWindow.style.display = 'none';
                    this.chatIcon.style.display = 'block';
                    this.closeIcon.style.display = 'none';
                }
            }

            async handleSubmit(e) {
                e.preventDefault();
                const message = this.chatInput.value.trim();
                if (!message) return;

                this.sendMessage(message);
            }

            async sendMessage(message) {
                // Disable form to prevent multiple submissions
                const sendButton = this.chatForm.querySelector('.chat-send');
                const originalButtonHTML = sendButton.innerHTML;

                sendButton.disabled = true;
                sendButton.innerHTML = `
                    <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                        <circle cx="12" cy="12" r="10"></circle>
                        <path d="M12 6v6l4 2"></path>
                    </svg>
                `;

                // Add user message and force scroll to bottom (user initiated action)
                this.addMessage(message, 'user');
                this.forceScrollToBottom();
                this.chatInput.value = '';
                this.messageCount++;

                // Check if we're in contact collection mode
                if (this.handleContactCollection(message)) {
                    // Contact collection handled the message, no need for AI response
                    sendButton.disabled = false;
                    sendButton.innerHTML = originalButtonHTML;
                    this.chatInput.focus();
                    this.ensureChatFormVisible();
                    return;
                }

                // Show typing indicator
                const typingId = this.addTypingIndicator();

                try {
                    const response = await this.callAI(message);
                    this.removeMessage(typingId);
                    this.addMessage(response, 'bot');

                    // Smart scroll: only auto-scroll if user was near bottom
                    setTimeout(() => this.scrollToBottom(), 100);

                    // After 3+ messages, offer simple contact collection
                    if (this.messageCount >= 3 && this.shouldPromptForInfo && !this.userInfo.hasProvidedInfo) {
                        const lowerMessage = message.toLowerCase();

                        // Check if they're showing interest in services (simple trigger)
                        if (lowerMessage.includes('consultation') || lowerMessage.includes('get started') ||
                            lowerMessage.includes('pricing') || lowerMessage.includes('cost') ||
                            lowerMessage.includes('services') || lowerMessage.includes('help me')) {

                            setTimeout(() => {
                                this.startSimpleContactCollection();
                            }, 1500);
                        }
                    }
                } catch (error) {
                    console.error('Chat error:', error);
                    this.removeMessage(typingId);
                    this.addMessage("I'm having trouble connecting right now. Please try again or contact us directly through our contact page.", 'bot');
                } finally {
                    // Always re-enable the button and restore original state
                    sendButton.disabled = false;
                    sendButton.innerHTML = originalButtonHTML;
                    this.chatInput.focus();

                    // Safety check to ensure chat form is visible
                    this.ensureChatFormVisible();
                }
            }

            async callAI(message) {
                // Use real API if key is available, otherwise fallback to contextual responses
                if (this.apiKey && this.apiKey !== '' && this.apiKey.length > 10) {
                    try {
                        // Add timeout to prevent hanging
                        const timeoutPromise = new Promise((_, reject) =>
                            setTimeout(() => reject(new Error('Request timeout')), 10000)
                        );

                        let apiCall;
                        if (this.apiProvider === 'openai') {
                            apiCall = this.callOpenAI(message);
                        } else if (this.apiProvider === 'claude') {
                            apiCall = this.callClaude(message);
                        } else {
                            throw new Error('Unknown API provider');
                        }

                        return await Promise.race([apiCall, timeoutPromise]);
                    } catch (error) {
                        console.error('API call failed:', error);
                        // Fallback to contextual response
                    }
                }
                return this.getContextualResponse(message);
            }

            async callOpenAI(message) {
                const controller = new AbortController();
                const timeoutId = setTimeout(() => controller.abort(), 30000); // 30 second timeout

                try {
                    const response = await fetch('https://api.openai.com/v1/chat/completions', {
                        method: 'POST',
                        signal: controller.signal,
                        headers: {
                            'Content-Type': 'application/json',
                            'Authorization': `Bearer ${this.apiKey}`
                        },
                    body: JSON.stringify({
                        model: 'gpt-3.5-turbo',
                        messages: [
                            {
                                role: 'system',
                                content: `You are Abba AI, the intelligent assistant for Abba Baba - a pioneering AI-human collaboration company.

Company Overview:
- Abba Baba specializes in AI-human collaboration through workflow automation, marketing innovation, and Web3 solutions
- Our mission: Get your time back through intelligent automation
- We believe AI should enhance human capabilities, not replace them

Key Services:
1. Workflow Automation - Streamline business processes to reclaim time
2. Marketing Automation - Automated social engagement and marketing campaigns
3. AI Integration - Help companies discover creative AI applications
4. Mycelium - Living AI network that connects all departments like organic fungal networks
5. Riddlen Platform - Web3 riddle game with human oracle network for AI validation

Riddlen Details:
- AI generates riddles, humans validate and curate
- Cross-chain oracle setup for enterprise data validation
- Complete open-source, gasless crypto ecosystem
- Combines AI generation with human verification

Brand Voice: Professional yet approachable, innovation-focused, human-centric, empowering. Always focus on how we give time and freedom back to business owners.

Keep responses concise, helpful, and focused on our services. Encourage users to contact us for consultations.`
                            },
                            {
                                role: 'user',
                                content: message
                            }
                        ],
                        max_tokens: 300,
                        temperature: 0.7
                    })
                });

                    clearTimeout(timeoutId);

                    if (!response.ok) {
                        const errorText = await response.text();
                        console.error('OpenAI API Error:', response.status, errorText);
                        throw new Error(`API request failed: ${response.status}`);
                    }

                    const data = await response.json();
                    return data.choices[0].message.content;
                } catch (error) {
                    clearTimeout(timeoutId);
                    console.error('OpenAI API call failed:', error);
                    throw error;
                }
            }

            async callClaude(message) {
                const response = await fetch('https://api.anthropic.com/v1/messages', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': `Bearer ${this.apiKey}`,
                        'anthropic-version': '2023-06-01'
                    },
                    body: JSON.stringify({
                        model: 'claude-3-haiku-20240307',
                        max_tokens: 300,
                        system: `You are Abba AI, the intelligent assistant for Abba Baba - a pioneering AI-human collaboration company.

Company Overview:
- Abba Baba specializes in AI-human collaboration through workflow automation, marketing innovation, and Web3 solutions
- Our mission: Get your time back through intelligent automation
- We believe AI should enhance human capabilities, not replace them

Key Services:
1. Workflow Automation - Streamline business processes to reclaim time
2. Marketing Automation - Automated social engagement and marketing campaigns
3. AI Integration - Help companies discover creative AI applications
4. Mycelium - Living AI network that connects all departments like organic fungal networks
5. Riddlen Platform - Web3 riddle game with human oracle network for AI validation

Riddlen Details:
- AI generates riddles, humans validate and curate
- Cross-chain oracle setup for enterprise data validation
- Complete open-source, gasless crypto ecosystem
- Combines AI generation with human verification

Brand Voice: Professional yet approachable, innovation-focused, human-centric, empowering. Always focus on how we give time and freedom back to business owners.

Keep responses concise, helpful, and focused on our services. Encourage users to contact us for consultations.`,
                        messages: [
                            {
                                role: 'user',
                                content: message
                            }
                        ]
                    })
                });

                if (!response.ok) {
                    throw new Error('API request failed');
                }

                const data = await response.json();
                return data.content[0].text;
            }

            getContextualResponse(message) {
                const lowerMessage = message.toLowerCase();

                if (lowerMessage.includes('service') || lowerMessage.includes('what do you do') || lowerMessage.includes('help my business') || lowerMessage.includes('transform my business')) {
                    return "Oh, this is exciting! üéâ We're basically the matchmakers between humans and AI - we help them work together beautifully instead of fighting each other!\n\nHere's what we love doing:\n\nüîÑ **Workflow Automation** - Get your time back by automating the boring stuff\nüéØ **Marketing Magic** - Scale your outreach without losing that human touch\nüß† **AI Integration** - Find creative ways AI can supercharge your business\nüçÑ **Mycelium Network** - Connect all your departments like a living, breathing organism\nüéÆ **Riddlen Platform** - Our fun Web3 project where AI and humans collaborate on riddles!\n\nWhat caught your eye? I'd love to dive deeper into what could help your business most! üí´";
                }

                if (lowerMessage.includes('mycelium') || lowerMessage.includes('network') || lowerMessage.includes('living ai')) {
                    return "OMG, Mycelium is my absolute favorite thing to talk about! üçÑ‚ú®\n\nSo you know how in forests, there's this incredible underground network called mycelium that connects all the trees and plants? They literally share nutrients, communicate about threats, and help each other thrive!\n\nWe thought: \"What if businesses could work like that?\" üí°\n\n**Here's the magic:**\nüå± Your departments become interconnected (no more silos!)\nüß† Information flows naturally between teams\n‚ö° Decisions happen faster because everyone has context\nüöÄ Your whole organization gets smarter over time\n\nImagine your sales team instantly knowing what support learned about a customer, or marketing automatically adjusting based on operations capacity. That's Mycelium!\n\nWant me to show you what this could look like for your business? I get so excited about the possibilities! üéâ";
                }

                if (lowerMessage.includes('riddlen') || lowerMessage.includes('web3')) {
                    return "Oh, Riddlen is such a fun project! üéÆ‚ú® It's like the perfect playground where AI and humans collaborate!\n\nHere's the cool part:\nü§ñ AI creates these amazing riddles and puzzles\nüë• Humans (our oracle network) validate and curate the best ones\nüí´ Everything happens on blockchain but it's completely gasless (no fees!)\nüéÅ People get rewarded for quality contributions\n\nIt's basically proof that AI + humans = pure magic! Instead of AI trying to replace humans or humans fighting AI, they work together to create something neither could do alone.\n\nYou can actually try it out and see the collaboration in action! Want me to show you how to get involved? üöÄ";
                }

                if (lowerMessage.includes('collaboration') || lowerMessage.includes('ai human') || lowerMessage.includes('magic')) {
                    return "YES! AI-human collaboration is literally what gets me out of bed in the morning! ‚òÄÔ∏è‚ú®\n\nHere's why I'm obsessed with this:\n\nü§ñ **AI is brilliant at:** Processing tons of data, working 24/7, never getting tired, spotting patterns\nüë®‚Äçüíº **Humans are brilliant at:** Creativity, empathy, judgment calls, understanding context, making meaning\n\n**Together?** UNSTOPPABLE! üöÄ\n\nWe don't want AI to replace humans - that's boring! We want them to be the ultimate power couple:\n‚ú® AI handles the tedious stuff so humans can focus on what they love\nüéØ Humans guide AI to make better decisions\nüí° Creativity explodes when you combine human imagination with AI capability\n\nThe businesses that figure this out first? They're going to absolutely dominate their markets! Want to be one of them? üòâ";
                }

                if (lowerMessage.includes('automation') || lowerMessage.includes('wins') || lowerMessage.includes('success')) {
                    return "Oh, I LOVE sharing automation wins! üéâ These stories always give me chills because you can literally feel the relief and excitement in people's voices when they get their time back!\n\n**Real transformations we've seen:**\n‚è∞ **Time Freedom:** One client went from 60-hour weeks to 35 hours while growing their business 40%\nüòÖ **Stress Relief:** No more staying up at night worrying about missed follow-ups or dropped leads\nüöÄ **Growth Explosion:** Companies scaling from 5 to 50 employees without the chaos\nüí∞ **Money Magic:** Saving $30k+ annually on tasks that now happen automatically\n\n**The secret sauce?** We don't just automate tasks - we create intelligent systems that get smarter over time!\n\nWhat's eating up most of your time right now? I bet we could free up at least 10-15 hours a week for you! üòä";
                }

                if (lowerMessage.includes('contact') || lowerMessage.includes('consultation') || lowerMessage.includes('get started') || lowerMessage.includes('interested')) {
                    return "This is the best part! üéâ I'm getting excited just thinking about what we could create together!\n\n**Here's how we make magic happen:**\n\nüéØ **Free Discovery Call** - We spend 30 minutes understanding your business and spotting automation gold mines\nüí° **Custom Roadmap** - We'll design a plan specifically for YOUR unique situation\nüöÄ **Quick Wins First** - We start with automations that give you immediate relief\nüìà **Scale to Success** - Then we build the bigger vision that transforms everything\n\n**What you'll walk away with:**\n‚úÖ Clear picture of your automation potential\n‚úÖ Specific time savings estimates\n‚úÖ ROI projections that'll make you smile\n‚úÖ A roadmap to get your life back!\n\nReady to get started? I can barely contain my excitement! üåü";
                }

                // Default response
                return `Hey! I love that you're curious! üòä I'm here to help you discover how AI and humans can work together to transform your business and give you your time back!\n\n**I'm especially excited to chat about:**\nüöÄ How automation could free up hours of your time each week\nüçÑ Our Mycelium network that connects your whole business intelligently\nüéÆ Riddlen - our fun collaboration platform\nü§ù The magic that happens when AI and humans team up\n\n**Want to dive deeper?** Check out our [Services page](/services) for the full picture, or ask me anything! I genuinely love talking about this stuff! ‚ú®\n\nWhat's got you most curious about AI automation?`;
            }

            addMessage(content, type) {
                const messageId = 'msg-' + Date.now();
                const messageEl = document.createElement('div');
                messageEl.id = messageId;
                messageEl.className = `message ${type}-message`;

                messageEl.innerHTML = `
                    <div class="message-content">
                        <p>${content.replace(/\n/g, '<br>')}</p>
                    </div>
                `;

                this.chatMessages.appendChild(messageEl);
                this.scrollToBottom();
                return messageId;
            }

            addTypingIndicator() {
                const typingId = 'typing-' + Date.now();
                const typingEl = document.createElement('div');
                typingEl.id = typingId;
                typingEl.className = 'message bot-message typing';

                typingEl.innerHTML = `
                    <div class="message-content">
                        <div class="typing-indicator">
                            <span></span>
                            <span></span>
                            <span></span>
                        </div>
                    </div>
                `;

                this.chatMessages.appendChild(typingEl);
                this.scrollToBottom();
                return typingId;
            }

            removeMessage(messageId) {
                const messageEl = document.getElementById(messageId);
                if (messageEl) {
                    messageEl.remove();
                }
            }

            shouldAutoScroll() {
                // Check if user is near the bottom (within 100px)
                const scrollTop = this.chatMessages.scrollTop;
                const scrollHeight = this.chatMessages.scrollHeight;
                const clientHeight = this.chatMessages.clientHeight;
                return scrollTop + clientHeight >= scrollHeight - 100;
            }

            scrollToBottom() {
                // Only auto-scroll if user was already near the bottom
                if (this.shouldAutoScroll()) {
                    this.chatMessages.scrollTop = this.chatMessages.scrollHeight;
                }
            }

            forceScrollToBottom() {
                // Force scroll to bottom (used when user sends a message)
                this.chatMessages.scrollTop = this.chatMessages.scrollHeight;
            }
        }

        // Initialize chat widget when DOM is loaded
        let AbbaChat;
        document.addEventListener('DOMContentLoaded', function() {
            AbbaChat = new AbbaAIChat();
        });
    </script>

    <script src="{{ '/assets/js/main.js' | relative_url }}"></script>
</body>
</html>